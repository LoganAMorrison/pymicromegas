from typing import ClassVar, Tuple

class DirectDetectionExperiment:
    Xenon1T2018: ClassVar[DirectDetectionExperiment] = ...
    Cresst2019: ClassVar[DirectDetectionExperiment] = ...
    DarkSide2018: ClassVar[DirectDetectionExperiment] = ...
    Pico2019: ClassVar[DirectDetectionExperiment] = ...
    def __init__(self) -> None: ...
    def __str__(self) -> str: ...
    def __eq__(self, other): ...
    def __ne__(self, other): ...
    def __lt__(self, other): ...
    def __gt__(self, other): ...
    def __le__(self, other): ...
    def __ge__(self, other): ...
    def __hash__(self): ...
    def __int__(self): ...
    def __index__(self): ...
    @property
    def name(self): ...

class DirectDetectionResults:
    __doc__: str
    __module__: str
    def __repr__(self) -> str: ...
    def __init__(self) -> None: ...
    @property
    def xenon1T(self) -> float: ...
    @property
    def cresst(self) -> float: ...
    @property
    def pico(self) -> float: ...
    @property
    def darkside(self) -> float: ...

class DirectDetectionAmps:
    __doc__: str
    __module__: str
    def __init__(self) -> None: ...
    def __repr__(self) -> str: ...
    @property
    def proton_si(self) -> float: ...
    @property
    def proton_sd(self) -> float: ...
    @property
    def neutron_si(self) -> float: ...
    @property
    def neutron_sd(self) -> float: ...

class MssmParameter:
    Mu: ClassVar[MssmParameter]
    Mg1: ClassVar[MssmParameter] = ...
    Mg2: ClassVar[MssmParameter] = ...
    Mg3: ClassVar[MssmParameter] = ...
    Ml1: ClassVar[MssmParameter] = ...
    Ml2: ClassVar[MssmParameter] = ...
    Ml3: ClassVar[MssmParameter] = ...
    Mr1: ClassVar[MssmParameter] = ...
    Mr2: ClassVar[MssmParameter] = ...
    Mr3: ClassVar[MssmParameter] = ...
    Mq1: ClassVar[MssmParameter] = ...
    Mq2: ClassVar[MssmParameter] = ...
    Mq3: ClassVar[MssmParameter] = ...
    Mu1: ClassVar[MssmParameter] = ...
    Mu2: ClassVar[MssmParameter] = ...
    Mu3: ClassVar[MssmParameter] = ...
    Md1: ClassVar[MssmParameter] = ...
    Md2: ClassVar[MssmParameter] = ...
    Md3: ClassVar[MssmParameter] = ...
    Mh3: ClassVar[MssmParameter] = ...
    Tb: ClassVar[MssmParameter] = ...
    At: ClassVar[MssmParameter] = ...
    Ab: ClassVar[MssmParameter] = ...
    Al: ClassVar[MssmParameter] = ...
    Au: ClassVar[MssmParameter] = ...
    Ad: ClassVar[MssmParameter] = ...
    Alfsmz: ClassVar[MssmParameter] = ...
    Mz: ClassVar[MssmParameter] = ...
    Mw: ClassVar[MssmParameter] = ...
    Mtp: ClassVar[MssmParameter] = ...
    Mbmb: ClassVar[MssmParameter] = ...
    Mcmc: ClassVar[MssmParameter] = ...
    Gg: ClassVar[MssmParameter] = ...
    Q: ClassVar[MssmParameter] = ...
    Ee: ClassVar[MssmParameter] = ...
    Ml: ClassVar[MssmParameter] = ...
    Mq: ClassVar[MssmParameter] = ...
    Am: ClassVar[MssmParameter] = ...
    def __init__(self) -> None: ...
    def __str__(self) -> str: ...
    def __eq__(self, other): ...
    def __ne__(self, other): ...
    def __lt__(self, other): ...
    def __gt__(self, other): ...
    def __le__(self, other): ...
    def __ge__(self, other): ...
    def __hash__(self): ...
    def __int__(self): ...
    def __index__(self): ...
    @property
    def name(self): ...

def nucleon_amplitudes_cdm1() -> DirectDetectionAmps: ...
def nucleon_amplitudes_cdm2() -> DirectDetectionAmps: ...
def direct_detection_factor_maxwell() -> DirectDetectionResults: ...
def direct_detection_factor_shmpp() -> DirectDetectionResults: ...
def direct_detection_pval_maxwell() -> DirectDetectionResults: ...
def direct_detection_pval_shmpp() -> DirectDetectionResults: ...
def xenon1T_90() -> float: ...
def xenon1T_sdp_90() -> float: ...
def xenon1T_sdn_90() -> float: ...
def darkside50_90() -> float: ...
def darkside50_90_nob() -> float: ...
def cresst3_90() -> float: ...
def cresst3_sdn_90() -> float: ...
def pico60_90() -> float: ...
def pico60_sdp_90() -> float: ...
def cdm1() -> str: ...
def cdm2() -> str: ...
def mcdm1() -> float: ...
def mcdm2() -> float: ...
def set_v_decay(flag: int) -> int: ...
def assign_val(name: str, val: float) -> int: ...
def assign_val_w(name: str, val: float) -> int: ...
def mssm_assign_val(param: MssmParameter, val: float) -> int: ...
def mssm_assign_val_w(param: MssmParameter, val: float) -> int: ...
def find_val(name: str) -> float: ...
def find_val_w(name: str) -> float: ...
def mssm_find_val(name: MssmParameter) -> float: ...
def mssm_find_val_w(name: MssmParameter) -> float: ...
def name_to_pdg(name: str) -> int: ...
def name_to_mass(name: str) -> float: ...
def pdg_to_name(pdf: int) -> str: ...
def sort_odd_particles() -> None: ...
def clean_decay_table() -> None: ...
def mssm_gmuon() -> float: ...
def mssm_deltarho() -> float: ...
def mssm_bsgnlo() -> Tuple[float, float]: ...
def mssm_bsmumu() -> float: ...
def mssm_btaunu() -> float: ...
def mssm_rl23() -> float: ...
def mssm_d_taunu_and_munu() -> Tuple[float, float]: ...
def mssm_masslimits() -> float: ...
def relic_density() -> Tuple[float, float]: ...
def z_invisible() -> bool: ...
def lsp_nlsp_lep() -> Tuple[float, float]: ...
def z_prime_limits() -> bool: ...
def monojet() -> float: ...
def mssm_ewsb() -> None: ...
def mssm_sugra() -> None: ...
