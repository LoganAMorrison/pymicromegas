diff --git a/micromegas/MSSM/pymicromegas/execute.cpp b/micromegas/MSSM/pymicromegas/execute.cpp
index d8da221..980bbe4 100644
--- a/micromegas/MSSM/pymicromegas/execute.cpp
+++ b/micromegas/MSSM/pymicromegas/execute.cpp
@@ -59,8 +59,8 @@ void execute(MicromegasResults *results, const MicromegasSettings &settings,
   }
 
   try {
-    ewsb.assign_all();
     Micromegas::mssm_ewsb();
+    ewsb.assign_all();
     micromegas::Micromegas::sort_odd_particles();
   } catch (const std::exception &e) {
     results->set_nans();
diff --git a/micromegas/Makefile b/micromegas/Makefile
index 88ff2e0..93de6e6 100644
--- a/micromegas/Makefile
+++ b/micromegas/Makefile
@@ -27,11 +27,11 @@ move_pymicromegas: build_pymicromegas
 	mv MSSM/softsusy$(EXTENSION) pymicromegas
 	mv MSSM/spheno$(EXTENSION) pymicromegas
 	mv MSSM/suspect$(EXTENSION) pymicromegas
-	# Pre-moved the files
-	# mv MSSM/pymicromegas/micromegas.pyi pymicromegas
-	# mv MSSM/pymicromegas/pymicromegas.pyi pymicromegas
-	# mv MSSM/pymicromegas/softsusy.pyi pymicromegas
-	# mv MSSM/pymicromegas/suspect.pyi pymicromegas
+	# Move the .pyi files
+	mv MSSM/pymicromegas/micromegas.pyi pymicromegas
+	mv MSSM/pymicromegas/pymicromegas.pyi pymicromegas
+	mv MSSM/pymicromegas/softsusy.pyi pymicromegas
+	mv MSSM/pymicromegas/suspect.pyi pymicromegas
 
 install:
 	$(shell pip install .)
diff --git a/micromegas/pymicromegas/distributor.py b/micromegas/pymicromegas/distributor.py
deleted file mode 100644
index 4dc16fa..0000000
--- a/micromegas/pymicromegas/distributor.py
+++ /dev/null
@@ -1,78 +0,0 @@
-from typing import Callable, List, Optional
-import multiprocessing as mp
-import tempfile
-import os
-import random
-
-
-class Worker:
-    def __init__(self, f: Callable, chunk, chdir: bool = True) -> None:
-        self.f = f
-        self.chunk = chunk
-        self.chdir = chdir
-
-    def work(self, cdir):
-        if self.chdir:
-            with tempfile.TemporaryDirectory() as tdir:
-                os.chdir(tdir)
-                results = [self.f(*args) for args in self.chunk]
-                os.chdir(cdir)
-            return results
-        else:
-            return [self.f(*args) for args in self.chunk]
-
-
-def work(worker: Worker, cdir: bool):
-    return worker.work(cdir)
-
-
-def apply_distributed(
-    f: Callable,
-    args_array: List,
-    nprocs: Optional[int] = None,
-    chdir: bool = True,
-) -> List:
-    """
-    Apply the function over the array of arguments distributed over mutliple
-    processes.
-
-    Parameters
-    ----------
-    f: Callable
-        Function to run.
-    args_array: List
-        List of arguments to apply function to. Function must be able to call
-        using: `f(*args_array[0])`
-    nprocs: int, Optional
-    """
-    if nprocs is None:
-        n = mp.cpu_count()
-    else:
-        n = nprocs
-    chunks = [args_array[i : i + n] for i in range(0, len(args_array), n)]
-    workers = [Worker(f, chunk, chdir) for chunk in chunks]
-    procs = mp.Pool(len(chunks))
-    cdir = os.getcwd()
-
-    results = []
-    for worker in workers:
-        results.append(procs.apply_async(work, (worker, cdir)))
-
-    procs.close()
-    procs.join()
-
-    return [res.get() for res in results]
-
-
-def test_f(x, y):
-    return [x * y, os.getcwd()]
-
-
-if __name__ == "__main__":
-    args_array = [(random.random(), random.random()) for _ in range(100)]
-    results = apply_distributed(test_f, args_array)
-
-    for res in results:
-        for r in res:
-            print(r)
-        print()
diff --git a/micromegas/pymicromegas/micromegas.pyi b/micromegas/pymicromegas/micromegas.pyi
deleted file mode 100644
index 438cb45..0000000
--- a/micromegas/pymicromegas/micromegas.pyi
+++ /dev/null
@@ -1,150 +0,0 @@
-from typing import ClassVar, Tuple
-
-class DirectDetectionExperiment:
-    Xenon1T2018: ClassVar[DirectDetectionExperiment] = ...
-    Cresst2019: ClassVar[DirectDetectionExperiment] = ...
-    DarkSide2018: ClassVar[DirectDetectionExperiment] = ...
-    Pico2019: ClassVar[DirectDetectionExperiment] = ...
-    def __init__(self) -> None: ...
-    def __str__(self) -> str: ...
-    def __eq__(self, other): ...
-    def __ne__(self, other): ...
-    def __lt__(self, other): ...
-    def __gt__(self, other): ...
-    def __le__(self, other): ...
-    def __ge__(self, other): ...
-    def __hash__(self): ...
-    def __int__(self): ...
-    def __index__(self): ...
-    @property
-    def name(self): ...
-
-class DirectDetectionResults:
-    __doc__: str
-    __module__: str
-    def __repr__(self) -> str: ...
-    def __init__(self) -> None: ...
-    @property
-    def xenon1T(self) -> float: ...
-    @property
-    def cresst(self) -> float: ...
-    @property
-    def pico(self) -> float: ...
-    @property
-    def darkside(self) -> float: ...
-
-class DirectDetectionAmps:
-    __doc__: str
-    __module__: str
-    def __init__(self) -> None: ...
-    def __repr__(self) -> str: ...
-    @property
-    def proton_si(self) -> float: ...
-    @property
-    def proton_sd(self) -> float: ...
-    @property
-    def neutron_si(self) -> float: ...
-    @property
-    def neutron_sd(self) -> float: ...
-
-class MssmParameter:
-    Mu: ClassVar[MssmParameter]
-    Mg1: ClassVar[MssmParameter] = ...
-    Mg2: ClassVar[MssmParameter] = ...
-    Mg3: ClassVar[MssmParameter] = ...
-    Ml1: ClassVar[MssmParameter] = ...
-    Ml2: ClassVar[MssmParameter] = ...
-    Ml3: ClassVar[MssmParameter] = ...
-    Mr1: ClassVar[MssmParameter] = ...
-    Mr2: ClassVar[MssmParameter] = ...
-    Mr3: ClassVar[MssmParameter] = ...
-    Mq1: ClassVar[MssmParameter] = ...
-    Mq2: ClassVar[MssmParameter] = ...
-    Mq3: ClassVar[MssmParameter] = ...
-    Mu1: ClassVar[MssmParameter] = ...
-    Mu2: ClassVar[MssmParameter] = ...
-    Mu3: ClassVar[MssmParameter] = ...
-    Md1: ClassVar[MssmParameter] = ...
-    Md2: ClassVar[MssmParameter] = ...
-    Md3: ClassVar[MssmParameter] = ...
-    Mh3: ClassVar[MssmParameter] = ...
-    Tb: ClassVar[MssmParameter] = ...
-    At: ClassVar[MssmParameter] = ...
-    Ab: ClassVar[MssmParameter] = ...
-    Al: ClassVar[MssmParameter] = ...
-    Au: ClassVar[MssmParameter] = ...
-    Ad: ClassVar[MssmParameter] = ...
-    Alfsmz: ClassVar[MssmParameter] = ...
-    Mz: ClassVar[MssmParameter] = ...
-    Mw: ClassVar[MssmParameter] = ...
-    Mtp: ClassVar[MssmParameter] = ...
-    Mbmb: ClassVar[MssmParameter] = ...
-    Mcmc: ClassVar[MssmParameter] = ...
-    Gg: ClassVar[MssmParameter] = ...
-    Q: ClassVar[MssmParameter] = ...
-    Ee: ClassVar[MssmParameter] = ...
-    Ml: ClassVar[MssmParameter] = ...
-    Mq: ClassVar[MssmParameter] = ...
-    Am: ClassVar[MssmParameter] = ...
-    def __init__(self) -> None: ...
-    def __str__(self) -> str: ...
-    def __eq__(self, other): ...
-    def __ne__(self, other): ...
-    def __lt__(self, other): ...
-    def __gt__(self, other): ...
-    def __le__(self, other): ...
-    def __ge__(self, other): ...
-    def __hash__(self): ...
-    def __int__(self): ...
-    def __index__(self): ...
-    @property
-    def name(self): ...
-
-def nucleon_amplitudes_cdm1() -> DirectDetectionAmps: ...
-def nucleon_amplitudes_cdm2() -> DirectDetectionAmps: ...
-def direct_detection_factor_maxwell() -> DirectDetectionResults: ...
-def direct_detection_factor_shmpp() -> DirectDetectionResults: ...
-def direct_detection_pval_maxwell() -> DirectDetectionResults: ...
-def direct_detection_pval_shmpp() -> DirectDetectionResults: ...
-def xenon1T_90() -> float: ...
-def xenon1T_sdp_90() -> float: ...
-def xenon1T_sdn_90() -> float: ...
-def darkside50_90() -> float: ...
-def darkside50_90_nob() -> float: ...
-def cresst3_90() -> float: ...
-def cresst3_sdn_90() -> float: ...
-def pico60_90() -> float: ...
-def pico60_sdp_90() -> float: ...
-def cdm1() -> str: ...
-def cdm2() -> str: ...
-def mcdm1() -> float: ...
-def mcdm2() -> float: ...
-def set_v_decay(flag: int) -> int: ...
-def assign_val(name: str, val: float) -> int: ...
-def assign_val_w(name: str, val: float) -> int: ...
-def mssm_assign_val(param: MssmParameter, val: float) -> int: ...
-def mssm_assign_val_w(param: MssmParameter, val: float) -> int: ...
-def find_val(name: str) -> float: ...
-def find_val_w(name: str) -> float: ...
-def mssm_find_val(name: MssmParameter) -> float: ...
-def mssm_find_val_w(name: MssmParameter) -> float: ...
-def name_to_pdg(name: str) -> int: ...
-def name_to_mass(name: str) -> float: ...
-def pdg_to_name(pdf: int) -> str: ...
-def sort_odd_particles() -> None: ...
-def clean_decay_table() -> None: ...
-def mssm_gmuon() -> float: ...
-def mssm_deltarho() -> float: ...
-def mssm_bsgnlo() -> Tuple[float, float]: ...
-def mssm_bsmumu() -> float: ...
-def mssm_btaunu() -> float: ...
-def mssm_rl23() -> float: ...
-def mssm_d_taunu_and_munu() -> Tuple[float, float]: ...
-def mssm_masslimits() -> float: ...
-def relic_density() -> Tuple[float, float]: ...
-def z_invisible() -> bool: ...
-def lsp_nlsp_lep() -> Tuple[float, float]: ...
-def z_prime_limits() -> bool: ...
-def monojet() -> float: ...
-def mssm_ewsb() -> None: ...
-def mssm_sugra() -> None: ...
diff --git a/micromegas/pymicromegas/pymicromegas.pyi b/micromegas/pymicromegas/pymicromegas.pyi
deleted file mode 100644
index 588cc50..0000000
--- a/micromegas/pymicromegas/pymicromegas.pyi
+++ /dev/null
@@ -1,321 +0,0 @@
-from typing import List, overload
-
-class SugraParameters:
-    def __repr__(self) -> str: ...
-    @overload
-    def __init__(self) -> None: ...
-    @overload
-    def __init__(
-        self, m0: float, mhf: float, a0: float, tb: float, sgn: float
-    ) -> None: ...
-    @property
-    def m0(self) -> float: ...
-    @m0.setter
-    def m0(self, val) -> None: ...
-    @property
-    def mhf(self) -> float: ...
-    @mhf.setter
-    def mhf(self, val) -> None: ...
-    @property
-    def a0(self) -> float: ...
-    @a0.setter
-    def a0(self, val) -> None: ...
-    @property
-    def tb(self) -> float: ...
-    @tb.setter
-    def tb(self, val) -> None: ...
-    @property
-    def sgn(self) -> float: ...
-    @sgn.setter
-    def sgn(self, val) -> None: ...
-
-class EwsbParameters:
-    def __repr__(self) -> str: ...
-    @overload
-    def __init__(self) -> None: ...
-    @overload
-    def __init__(
-        self,
-        mu: float,
-        mg1: float,
-        mg2: float,
-        mg3: float,
-        ml1: float,
-        ml2: float,
-        ml3: float,
-        mr1: float,
-        mr2: float,
-        mr3: float,
-        mq1: float,
-        mq2: float,
-        mq3: float,
-        mu1: float,
-        mu2: float,
-        mu3: float,
-        md1: float,
-        md2: float,
-        md3: float,
-        mh3: float,
-        tb: float,
-        at: float,
-        ab: float,
-        al: float,
-    ) -> None: ...
-    @property
-    def mg1(self) -> float: ...
-    @mg1.setter
-    def mg1(self, val: float) -> None: ...
-    @property
-    def mg2(self) -> float: ...
-    @mg2.setter
-    def mg2(self, val: float) -> None: ...
-    @property
-    def mg3(self) -> float: ...
-    @mg3.setter
-    def mg3(self, val: float) -> None: ...
-    @property
-    def ml1(self) -> float: ...
-    @ml1.setter
-    def ml1(self, val: float) -> None: ...
-    @property
-    def ml2(self) -> float: ...
-    @ml2.setter
-    def ml2(self, val: float) -> None: ...
-    @property
-    def ml3(self) -> float: ...
-    @ml3.setter
-    def ml3(self, val: float) -> None: ...
-    @property
-    def mr1(self) -> float: ...
-    @mr1.setter
-    def mr1(self, val: float) -> None: ...
-    @property
-    def mr2(self) -> float: ...
-    @mr2.setter
-    def mr2(self, val: float) -> None: ...
-    @property
-    def mr3(self) -> float: ...
-    @mr3.setter
-    def mr3(self, val: float) -> None: ...
-    @property
-    def mq1(self) -> float: ...
-    @mq1.setter
-    def mq1(self, val: float) -> None: ...
-    @property
-    def mq2(self) -> float: ...
-    @mq2.setter
-    def mq2(self, val: float) -> None: ...
-    @property
-    def mq3(self) -> float: ...
-    @mq3.setter
-    def mq3(self, val: float) -> None: ...
-    @property
-    def mu1(self) -> float: ...
-    @mu1.setter
-    def mu1(self, val: float) -> None: ...
-    @property
-    def mu2(self) -> float: ...
-    @mu2.setter
-    def mu2(self, val: float) -> None: ...
-    @property
-    def mu3(self) -> float: ...
-    @mu3.setter
-    def mu3(self, val: float) -> None: ...
-    @property
-    def md1(self) -> float: ...
-    @md1.setter
-    def md1(self, val: float) -> None: ...
-    @property
-    def md2(self) -> float: ...
-    @md2.setter
-    def md2(self, val: float) -> None: ...
-    @property
-    def md3(self) -> float: ...
-    @md3.setter
-    def md3(self, val: float) -> None: ...
-    @property
-    def mu(self) -> float: ...
-    @mu.setter
-    def mu(self, val: float) -> None: ...
-    @property
-    def mh3(self) -> float: ...
-    @mh3.setter
-    def mh3(self, val: float) -> None: ...
-    @property
-    def tb(self) -> float: ...
-    @tb.setter
-    def tb(self, val: float) -> None: ...
-    @property
-    def at(self) -> float: ...
-    @at.setter
-    def at(self, val: float) -> None: ...
-    @property
-    def ab(self) -> float: ...
-    @ab.setter
-    def ab(self, val: float) -> None: ...
-    @property
-    def al(self) -> float: ...
-    @al.setter
-    def al(self, val: float) -> None: ...
-    @property
-    def au(self) -> float: ...
-    @au.setter
-    def au(self, val: float) -> None: ...
-    @property
-    def ad(self) -> float: ...
-    @ad.setter
-    def ad(self, val: float) -> None: ...
-    @property
-    def am(self) -> float: ...
-    @am.setter
-    def am(self, val: float) -> None: ...
-
-class MicromegasResults:
-    def __repr__(self) -> str: ...
-    def omega(self) -> List[float]: ...
-    def xf(self) -> List[float]: ...
-    def bsgsm(self) -> List[float]: ...
-    def bsgnlo(self) -> List[float]: ...
-    def deltarho(self) -> List[float]: ...
-    def bsmumu(self) -> List[float]: ...
-    def bstaunu(self) -> List[float]: ...
-    def gmuon(self) -> List[float]: ...
-    def rl23(self) -> List[float]: ...
-    def dtaunu(self) -> List[float]: ...
-    def dmunu(self) -> List[float]: ...
-    def masslimits(self) -> List[float]: ...
-    def proton_si_amp(self) -> List[float]: ...
-    def proton_sd_amp(self) -> List[float]: ...
-    def neutron_si_amp(self) -> List[float]: ...
-    def neutron_sd_amp(self) -> List[float]: ...
-    def pval_xenon1T(self) -> List[float]: ...
-    def pval_cresst(self) -> List[float]: ...
-    def pval_darkside(self) -> List[float]: ...
-    def pval_pico(self) -> List[float]: ...
-    def msel(self) -> List[float]: ...
-    def mser(self) -> List[float]: ...
-    def msne(self) -> List[float]: ...
-    def msml(self) -> List[float]: ...
-    def msmr(self) -> List[float]: ...
-    def msnm(self) -> List[float]: ...
-    def msl1(self) -> List[float]: ...
-    def msl2(self) -> List[float]: ...
-    def msnl(self) -> List[float]: ...
-    def msul(self) -> List[float]: ...
-    def msur(self) -> List[float]: ...
-    def msdl(self) -> List[float]: ...
-    def msdr(self) -> List[float]: ...
-    def mscl(self) -> List[float]: ...
-    def mscr(self) -> List[float]: ...
-    def mssl(self) -> List[float]: ...
-    def mssr(self) -> List[float]: ...
-    def mst1(self) -> List[float]: ...
-    def mst2(self) -> List[float]: ...
-    def msb1(self) -> List[float]: ...
-    def msb2(self) -> List[float]: ...
-    def mneut1(self) -> List[float]: ...
-    def mneut2(self) -> List[float]: ...
-    def mneut3(self) -> List[float]: ...
-    def mneut4(self) -> List[float]: ...
-    def mchg1(self) -> List[float]: ...
-    def mchg2(self) -> List[float]: ...
-    def mhsm(self) -> List[float]: ...
-    def mh(self) -> List[float]: ...
-    def mhc(self) -> List[float]: ...
-    def mg(self) -> List[float]: ...
-
-class MicromegasSettings:
-    def __init__(
-        self: MicromegasSettings,
-        relic_density: bool = True,
-        masses: bool = True,
-        gmuon: bool = True,
-        bsg: bool = False,
-        bsmumu: bool = False,
-        btaunu: bool = False,
-        deltarho: bool = False,
-        rl23: bool = False,
-        d_taunu_and_munu: bool = False,
-        masslimits: bool = False,
-        nucleon_amplitudes: bool = False,
-        direct_detection_pvalues: bool = False,
-        z_invisible: bool = False,
-        lsp_nlsp_lep: bool = False,
-        z_prime_limits: bool = False,
-        monojet: bool = False,
-        fast: bool = True,
-        beps: float = 0.0001,
-    ) -> None: ...
-    def __repr__(self) -> str: ...
-    @property
-    def relic_density(self) -> bool: ...
-    @relic_density.setter
-    def relic_density(self, val: bool) -> None: ...
-    @property
-    def masses(self) -> bool: ...
-    @masses.setter
-    def masses(self, val: bool) -> None: ...
-    @property
-    def gmuon(self) -> bool: ...
-    @gmuon.setter
-    def gmuon(self, val: bool) -> None: ...
-    @property
-    def bsg(self) -> bool: ...
-    @bsg.setter
-    def bsg(self, val: bool) -> None: ...
-    @property
-    def bsmumu(self) -> bool: ...
-    @bsmumu.setter
-    def bsmumu(self, val: bool) -> None: ...
-    @property
-    def btaunu(self) -> bool: ...
-    @btaunu.setter
-    def btaunu(self, val: bool) -> None: ...
-    @property
-    def deltarho(self) -> bool: ...
-    @deltarho.setter
-    def deltarho(self, val: bool) -> None: ...
-    @property
-    def rl23(self) -> bool: ...
-    @rl23.setter
-    def rl23(self, val: bool) -> None: ...
-    @property
-    def d_taunu_and_munu(self) -> bool: ...
-    @d_taunu_and_munu.setter
-    def d_taunu_and_munu(self, val: bool) -> None: ...
-    @property
-    def masslimits(self) -> bool: ...
-    @masslimits.setter
-    def masslimits(self, val: bool) -> None: ...
-    @property
-    def nucleon_amplitudes(self) -> bool: ...
-    @nucleon_amplitudes.setter
-    def nucleon_amplitudes(self, val: bool) -> None: ...
-    @property
-    def direct_detection_pvalues(self) -> bool: ...
-    @direct_detection_pvalues.setter
-    def direct_detection_pvalues(self, val: bool) -> None: ...
-    @property
-    def z_invisible(self) -> bool: ...
-    @z_invisible.setter
-    def z_invisible(self, val: bool) -> None: ...
-    @property
-    def lsp_nlsp_lep(self) -> bool: ...
-    @lsp_nlsp_lep.setter
-    def lsp_nlsp_lep(self, val: bool) -> None: ...
-    @property
-    def z_prime_limits(self) -> bool: ...
-    @z_prime_limits.setter
-    def z_prime_limits(self, val: bool) -> None: ...
-    @property
-    def monojet(self) -> bool: ...
-    @monojet.setter
-    def monojet(self, val: bool) -> None: ...
-    @property
-    def fast(self) -> bool: ...
-    @fast.setter
-    def fast(self, val: bool) -> None: ...
-    @property
-    def beps(self) -> float: ...
-    @beps.setter
-    def beps(self, val: float) -> None: ...
diff --git a/micromegas/pymicromegas/softsusy.pyi b/micromegas/pymicromegas/softsusy.pyi
deleted file mode 100644
index cf59e3b..0000000
--- a/micromegas/pymicromegas/softsusy.pyi
+++ /dev/null
@@ -1,32 +0,0 @@
-from typing import List, overload
-from pymicromegas import (
-    SugraParameters,
-    MicromegasResults,
-    MicromegasSettings,
-    EwsbParameters,
-)
-
-@overload
-def softsusy(
-    params: SugraParameters, settings: MicromegasSettings
-) -> MicromegasResults: ...
-@overload
-def softsusy(params: SugraParameters) -> MicromegasResults: ...
-@overload
-def softsusy(
-    params: List[SugraParameters], settings: MicromegasSettings
-) -> MicromegasResults: ...
-@overload
-def softsusy(params: List[SugraParameters]) -> MicromegasResults: ...
-@overload
-def softsusy(
-    params: EwsbParameters, settings: MicromegasSettings
-) -> MicromegasResults: ...
-@overload
-def softsusy(params: EwsbParameters) -> MicromegasResults: ...
-@overload
-def softsusy(
-    params: List[EwsbParameters], settings: MicromegasSettings
-) -> MicromegasResults: ...
-@overload
-def softsusy(params: List[EwsbParameters]) -> MicromegasResults: ...
diff --git a/micromegas/pymicromegas/spheno.pyi b/micromegas/pymicromegas/spheno.pyi
deleted file mode 100644
index c52043d..0000000
--- a/micromegas/pymicromegas/spheno.pyi
+++ /dev/null
@@ -1,32 +0,0 @@
-from typing import List, overload
-from pymicromegas import (
-    SugraParameters,
-    MicromegasResults,
-    MicromegasSettings,
-    EwsbParameters,
-)
-
-@overload
-def spheno(
-    params: SugraParameters, settings: MicromegasSettings
-) -> MicromegasResults: ...
-@overload
-def spheno(params: SugraParameters) -> MicromegasResults: ...
-@overload
-def spheno(
-    params: List[SugraParameters], settings: MicromegasSettings
-) -> MicromegasResults: ...
-@overload
-def spheno(params: List[SugraParameters]) -> MicromegasResults: ...
-@overload
-def spheno(
-    params: EwsbParameters, settings: MicromegasSettings
-) -> MicromegasResults: ...
-@overload
-def spheno(params: EwsbParameters) -> MicromegasResults: ...
-@overload
-def spheno(
-    params: List[EwsbParameters], settings: MicromegasSettings
-) -> MicromegasResults: ...
-@overload
-def spheno(params: List[EwsbParameters]) -> MicromegasResults: ...
diff --git a/micromegas/pymicromegas/suspect.pyi b/micromegas/pymicromegas/suspect.pyi
deleted file mode 100644
index aadef06..0000000
--- a/micromegas/pymicromegas/suspect.pyi
+++ /dev/null
@@ -1,32 +0,0 @@
-from typing import List, overload
-from pymicromegas import (
-    SugraParameters,
-    MicromegasResults,
-    MicromegasSettings,
-    EwsbParameters,
-)
-
-@overload
-def suspect(
-    params: SugraParameters, settings: MicromegasSettings
-) -> MicromegasResults: ...
-@overload
-def suspect(params: SugraParameters) -> MicromegasResults: ...
-@overload
-def suspect(
-    params: List[SugraParameters], settings: MicromegasSettings
-) -> MicromegasResults: ...
-@overload
-def suspect(params: List[SugraParameters]) -> MicromegasResults: ...
-@overload
-def suspect(
-    params: EwsbParameters, settings: MicromegasSettings
-) -> MicromegasResults: ...
-@overload
-def suspect(params: EwsbParameters) -> MicromegasResults: ...
-@overload
-def suspect(
-    params: List[EwsbParameters], settings: MicromegasSettings
-) -> MicromegasResults: ...
-@overload
-def suspect(params: List[EwsbParameters]) -> MicromegasResults: ...
